####### General ###########

alias ..='cd ..'

# changing directory to code project
function c { cd $CODE_HOME/$1; }

alias reload='. ~/.bash_profile'

# replace: find/replace strings across multiple files
#     example: replace *.rb find_string replace_string
function replace {
  # Prepare command
  ignore_hidden_folders="-not -path '*/.*/*'"
  ignore_tmp_dir="-not -path './tmp/*'"
  ignore_bower="-not -path '*/bower_components/*'"
  ignore_node="-not -path '*/node_modules/*'"
  find_command="find . $ignore_hidden_folders $ignore_tmp_dir $ignore_bower $ignore_node_modules -name \"$1\" -type f -print0"

  # Set character encoding to handle special characters
  LC_CTYPE=C
  LANG=C

  # Execute different sed command depending on OS
  if [[ "$unamestr" == 'Darwin' ]]; then
    eval $find_command | xargs -0 sed -i '' -e "s/$2/$3/g"
  else
    eval $find_command | xargs -0 sed -i -e "s/$2/$3/g"
  fi
}

function fail {
  echo $1 >&2
  exit 1
}

# Re-rerun a command 5 times
function retry {
  local n=1
  local max=5
  local delay=15
  while true; do
    "$@" && break || {
      if [[ $n -lt $max ]]; then
        ((n++))
        echo "Command failed. Attempt $n/$max:"
        sleep $delay;
      else
        fail "The command has failed after $n attempts."
      fi
    }
  done
}

# whitespace: remove trailing whitespace
#     example: whitespace *.rb
function whitespace {
  replace $1 "[[:space:]]\{1,\}$" ""
}

# Extension move
#     example: extmv . jpeg jpg
extmv () {
    find "${1}" -type f -name "*.${2}" |
    sed "s/\.${2}$//" |
    xargs -I% mv -iv "%.${2}" "%.${3}"
}

# ls
alias ls='ls -G -F'
alias l="ls -lAh"
alias ll="ls -l"
alias la='ls -A'

function autoformatall {
  autoformat "*.rb"
  autoformat "*.erb"
  autoformat "*.css"
  autoformat "*.js"
  autoformat "*.coffee"
  autoformat "*.scss"
  autoformat "*.sass"
  autoformat "*.feature"
}

command_exists () {
    type "$1" &> /dev/null ;
}

alias yumy='yum -y'
alias yummy='yum -y'
function vi () {
  vim_cmd="$((which nvim || which vim || which vi) | tail -n1)"
  $vim_cmd $@
}

# Open up last note in vim
function notes () {
  vim_cmd="$((which gvim || which mvim || which nvim || which vim) | tail -n1)"
  last_note=$(cd $NOTES_DIR; ls -td $(find . -type f) 2> /dev/null | head -n 1) &&
  $vim_cmd $NOTES_DIR/$last_note -c ":NERDTree $NOTES_DIR" -c "wincmd p"
}

######### Rails ###########
alias log='tail -f -n 800 log/development.log'
alias qlog='tail -f -n 800 log/cucumber.log'
alias tlog='tail -f -n 800 log/test.log'

alias rc='bundle exec rails console'
alias rg='bundle exec rails generate'
alias rs='bundle exec rails server'

alias rst='touch tmp/restart.txt'

####### Rspec ##########
alias irspec='RSPEC_INTERACTIVE=true bundle exec rspec'

# rrspec -- rerun rspec test 10 times
function rrspec () {
  for i in {1..10}; do bundle exec rspec $1; done
}

# trspec -- thrash CPU + rerun rspec test 10 times
function trspec () {
  # Start thrashing processes
  THRASHERS=8
  for ((i = 1 ; i <= THRASHERS ; i++)); do
    echo "Starting thrasher $i/$THRASHERS"
    (yes &) > /dev/null 2>&1
  done

  # Run rspec test 10 times
  for i in {1..10}; do rspec $1; done

  # Stop thrashers
  echo "Stopping thrashers"
  killall yes
}

####### Cucumber ##########
alias cuke='bundle exec cucumber -r features'
alias icuke='CUCUMBER_INTERACTIVE=true bundle exec cucumber -r features'

# slq (show last cukes): Show last 5 modified cukes
alias slq='find . -type f -name "*.feature" -print | xargs ls -rlt | tail -5'

# lq (last cuke): Run last modified cuke
alias lq='find . -type f -name "*.feature" -print | xargs ls -rt | tail -1 | xargs bundle exec cucumber -r features'


####### Karma #########
alias ks='bundle exec rake karma:start'
alias kr='bundle exec rake karma:run'


####### Linux-Mac Compatibility ###########
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
  alias pbcopy="xclip -selection clipboard"

  if [ -f /usr/local/bin/gvim ];
  then
    function gvim () { (/usr/local/bin/gvim -f "$@" &) }
  else
    function gvim () { (/usr/bin/gvim -f "$@" &) }
  fi

  alias mvim='gvim'
  alias open='gnome-open'
  alias ls='ls --color="auto" -F'
fi


################# Git ###############

# Shortcuts
alias ga='git add'
alias gl='git pull'
alias gp='git push'
alias gd='git diff'
alias gdc='git diff --cached'
alias gc='git commit'
alias gca='git commit -a'
alias gco='git checkout'
alias gb='git branch'
alias gs='git status'
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
alias changelog='git log `git log -1 --format=%H -- CHANGELOG*`..; cat CHANGELOG*'
alias gm='git commit -m'
alias gma='git commit -am'
alias gra='git remote add'
alias grr='git remote rm'
alias gg='git g'
alias gsg='git sgrep'
# grs: git reset submodules
alias grs="git submodule foreach --recursive | tac | sed 's/Entering //' | xargs -n1 -i bash -c 'echo {} && cd {} && git clean -ffd && git reset --hard'"

# Branch Clean: clears out all local git branches that have already been merged into the active branch
brclean () {
  branches_to_delete="$( git branch --merged | grep -v '^\*' | grep -v 'master' | grep -v 'staging' | grep -v 'release' )"
  if [[ "$branches_to_delete" == "" ]]; then
    echo "No branches to delete"
  else
    echo $branches_to_delete | xargs git branch -d
  fi
}

# Remote Branch Clean: clears out all remote branches that have already been merged into master
rbrclean () {
  # Fetch remote branches and clear refs to deleted ones
  git fetch --prune

  # Update master
  git checkout master && git pull origin master

  if [ $? -eq 0 ]; then
    echo "Checkout successful -- Updating/cleaning code"

    branches_to_delete="$(git branch -r --merged | grep -v '^\*' | grep -v 'origin/master' | grep -v 'origin/staging' | grep -v 'origin/release' | grep 'origin/' | sed 's/origin\///g')"
    if [[ "$branches_to_delete" == "" ]]; then
      echo "No remote branches to delete"
    else
      echo $branches_to_delete | xargs git push --delete origin
    fi
  else
    echo "Checkout unsuccessful -- Commit any working changes"
  fi
}

# Git Branch Clean: cleans out local and remote branches
function gbclean {
  rbrclean
  brclean
  git pup
  git gc
}

alias gbc='gbclean'

# Git Branch Authors: show authors of all git branches
function git-branch-authors {
  git branch -r | grep -v 'HEAD' | while read branch
  do
    name="$(git log --pretty=tformat:%an -1 $branch)"
    if [ $# -gt 0 ] && [ "$name" == "$1" ]
    then
      echo $branch : $name
    fi

    if [ $# -eq 0 ]
    then
      echo $branch : $name
    fi
  done
}

function git-remote-branches {
  for k in `git branch -r|awk '{print $1}'`;do echo `git show --pretty=format:"%Cgreen%ci %Cblue%cr %Cred%cn %Creset" $k|head -n 1`\\t$k;done|sort -r
}

alias gba='git-branch-authors'

# Git Recent: show git branches organized by date
function git-recent {
  git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'
}

# Output git root directory
function git_root() {
  local root first_commit
  # git displays its own error if not in a repository
  root=$(git rev-parse --show-toplevel) || return
  superproject=$(git rev-parse --show-superproject-working-tree)
  if [[ -n $superproject ]]; then
    echo $superproject
    return
  elif [[ -n $root ]]; then
    echo $root
    return
  elif [[ $(git rev-parse --is-inside-git-dir) = true ]]; then
    # We're inside the .git directory
    # Store the commit id of the first commit to compare later
    # It's possible that $GIT_DIR points somewhere not inside the repo
    first_commit=$(git rev-list --parents HEAD | tail -1) ||
      echo "$0: Can't get initial commit" 2>&1 && false && return
    root=$(git rev-parse --git-dir)/.. &&
      # subshell so we don't change the user's working directory
    ( cd "$root" &&
      if [[ $(git rev-list --parents HEAD | tail -1) = $first_commit ]]; then
        pwd
      else
        echo "$FUNCNAME: git directory is not inside its repository" 2>&1
        false
      fi
    )
  else
    echo "$FUNCNAME: Can't determine repository root" 2>&1
    false
  fi
}

# Recursively cd into project root
function cd_git_root() {
  local root
  root=$(git_root) || return # git_root will print any errors
  cd "$root"
  if [[ $(pwd) = $(git_root) ]]; then
    return
  else
    cd_git_root
  fi
}

# cr: change to root dir
alias cr="cd_git_root"


############## COLOR PRINTING #################
NORMAL=$(tty -s && tput sgr0)
GREEN=$(tty -s && tput setaf 2 && tput bold)
YELLOW=$(tty -s && tput setaf 3)
RED=$(tty -s && tput setaf 1)

function red() {
    echo -e "$RED$*$NORMAL"
}

function green() {
    echo -e "$GREEN$*$NORMAL"
}

function yellow() {
    echo -e "$YELLOW$*$NORMAL"
}

############## NODE ###########
alias npm-exec='PATH=$(npm bin):$PATH'
function npm-versions() {
  npm show $1 versions --json | jq .
}

############# FILE EXTRACTION ##########
function unzipall() {
  ls *.zip | awk -F'.zip' '{print "unzip \""$0"\" -d \""$1"\""}' | sh
}

function unrarall() {
  ls *.rar | awk -F'.rar' '{print "mkdir \""$1"\" && unrar x \""$0"\" \""$1"\""}' | sh
}

############## ITERM ###########
function set_tab_title () {
  TITLE=$*;

  if [[ "$SHELL" == '/bin/zsh' ]]; then
    DISABLE_AUTO_TITLE="true"
    echo -ne "\e]1;$TITLE\a"
  fi
  export PROMPT_COMMAND='echo -ne "\033]0;$TITLE\007"'
}

################ FZF ##################
alias preview="fzf --preview 'bat --color \"always\" {}'"
# add support for ctrl+o to open selected file in VS Code
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"

############## FFMPEG ######################
function aif2mp3() {
  for i in *.aif; do
    ffmpeg -i "$i" -codec:a libmp3lame -qscale:a 4 "${i%.*}.mp3";
  done
}

# Splits an audio file into multiple chunks based on silence
# Use:
#   splitname $AUDIO_FILE
function splitaudio() {
  filename=$(basename -- "$1")
  extension="${filename##*.}"
  basename="${filename%.*}"

  min_duration=3
  max_silence_volume=0.1%
  tail_duration=0.3 # .3sec
  sox -V3 "$1" "${basename}_split.${extension}" silence \
    1 $min_duration $max_silence_volume \
    1 $tail_duration $max_silence_volume : newfile : restart
}

# Rename files according to text document
# Use:
#   bulkrename $INDEX_FILE $FILE_QUERY
#   bulkrename songs.txt "*.aif"
function bulkrename() {
   index=$1
   files=$2

   index_entries=$(awk '1' "$index" | wc -l | awk '{print $1}')
   num_files=$(find . -name "$files" | wc -l | awk '{print $1}')
   echo "Index entries: $index_entries"
   echo "Files: $num_files"
   if [ "$index_entries" -ne "$num_files" ]; then
     echo "Aborting"
     return
   fi

   file_list=($files)
   i=0
   while read newname || [ -n "$newname" ]; do
     oldfile=${file_list[$i]}
     extension="${oldfile##*.}"
     command="mv \"${oldfile}\" \"${newname}.${extension}\""
     echo "$command"
     eval "$command"
     (( i++ ))
   done <$index
}